% Dynamic input definitions (to be generated by external means based on actual input)
container(4, 6).
item(1, 1, 3).
item(2, 2, 2).  
item(3, 2, 3).
item(4, 3, 3).

% Predicate to generate all valid X positions for an item within the container
valid_x(ItemID, X) :-
    item(ItemID, _, Width),
    container(_, ContainerWidth),
    X = 0..ContainerWidth-Width.

% Predicate to generate all valid Y positions for an item within the container
valid_y(ItemID, Y) :-
    item(ItemID, Height, _),
    container(ContainerHeight, _),
    Y = 0..ContainerHeight-Height.

% Encode the choice to place each item at any valid position where it fits
1 { placed(ItemID, X, Y) : valid_x(ItemID, X), valid_y(ItemID, Y) } 1 :-
    item(ItemID, _, _).

% Constraint to prevent item overlap
:- placed(I1, X1, Y1), placed(I2, X2, Y2),
   item(I1, H1, W1), item(I2, H2, W2),
   I1 != I2,
   X1 < X2 + W2, X2 < X1 + W1, Y1 < Y2 + H2, Y2 < Y1 + H1.

% Display the placement of items
#show placed/3.
